C51 COMPILER V9.60.0.0   MAIN                                                              04/28/2021 00:02:49 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*************************************************
   2          *功能描述: CEPARK CAN开发板-CAN自收发实验
   3          *说明：数码管从右到左分别是1~4位。
   4          *      数码管1、2位显示发送的数据，3、4位显示接收到的数据。
   5          *      每按一次中断按键发送数据值增一。
   6          *推荐教材：
   7          饶运涛,邹继军《现场总线 CAN 原理与应用技术》.北京：北京航空航天大学出版社 （这本书，看着不错）
   8          周立功《增强型80c51单片机速成与实战》还有周立功写的一些can通信程序算法很不错，值得学习
   9          本程序，融入了那么一点点点点点，他们的编程思想，哈哈....仅供学习用
  10          ****************************************************/ 
  11          #include <reg52.h>
  12          #include "sjapelican.h"
  13          #include "config.h"
  14          
  15          
  16          void INT0_Data(void) interrupt 0
  17          {   //INT0按键为计数按键
  18   1          EA = 0;
  19   1          Txd_data++; //存储计数结果，并为待发送的数据
  20   1        Peli_TXD();
  21   1          EA = 1;
  22   1      }
  23          
  24          void Peli_RXD(void) interrupt 2
  25          {   //接收数据函数，在中断服务程序中调用
  26   1      
  27   1          uint8 data Status;
  28   1          EA = 0;//关CPU中断
  29   1      
  30   1          Status = SJA_IR;
  31   1          if(Status & RI_BIT)
  32   1          {   //IR.0 = 1 接收中断
  33   2              RX_buffer[0] =  SJA_RBSR0;
  34   2              RX_buffer[1] =  SJA_RBSR1;
  35   2              RX_buffer[2] =  SJA_RBSR2;
  36   2              RX_buffer[3] =  SJA_RBSR3;
  37   2              RX_buffer[4] =  SJA_RBSR4;
  38   2              RX_buffer[5] =  SJA_RBSR5;
  39   2              RX_buffer[6] =  SJA_RBSR6;
  40   2              RX_buffer[7] =  SJA_RBSR7;
  41   2              RX_buffer[8] =  SJA_RBSR8;
  42   2              RX_buffer[9] =  SJA_RBSR9;
  43   2              RX_buffer[10] =  SJA_RBSR10;
  44   2              RX_buffer[11] =  SJA_RBSR11;
  45   2              RX_buffer[12] =  SJA_RBSR12;
  46   2      
  47   2              SJA_CMR = RRB_BIT;
  48   2              Status = SJA_ALC;//释放仲裁随时捕捉寄存器
  49   2              Status = SJA_ECC;//释放错误代码捕捉寄存器
  50   2          }
  51   1          SJA_IER = RIE_BIT;// .0=1--接收中断使能；
  52   1      
  53   1        Rxd_data = RX_buffer[5];
  54   1      
  55   1          EA = 1;//打开CPU中断
C51 COMPILER V9.60.0.0   MAIN                                                              04/28/2021 00:02:49 PAGE 2   

  56   1      }
  57          
  58          void MCU_Init(void)
  59          {
  60   1        //CPU初始化
  61   1        SJA_RST = 0;//SJA1000复位有效
  62   1        mDelay(10); //延时
  63   1          SJA_RST = 1;//CAN总线复位管脚,复位无效
  64   1          SJA_CS = 0;//CAN总线片选有效
  65   1          EX1 = 1;//外部中断1使能；CAN总线接收中断
  66   1          IT1 = 0;//CAN总线接收中断，低电平触发
  67   1          IT0 = 1;//外部中断0负边沿触发
  68   1          EX0 = 1;//打开外部中断0
  69   1          EA = 1; //打开总中断
  70   1      }
  71          
  72          void main(void)
  73          {
  74   1        cs1602 = 0;  //屏蔽1602使能脚能让四位数码管正常显示
  75   1        MCU_Init();
  76   1          Peli_Init();
  77   1      //  mDelay(1);
  78   1          while(1)
  79   1          {  
  80   2          LED_Disp_Seg7();
  81   2        }
  82   1      }
  83          
  84          void Peli_Init(void)
  85          {   //SJA1000 的初始化
  86   1          uint8 bdata Status;
  87   1          do
  88   1          {   // .0=1---reset MODRe,进入复位模式，以便设置相应的寄存器
  89   2              //防止未进入复位模式，重复写入
  90   2              SJA_MOD = RM_BIT |AFM_BIT;
  91   2            Status = SJA_MOD ;
  92   2          }
  93   1          while(!(Status & RM_BIT));
  94   1      
  95   1          SJA_CDR  = CANMode_BIT|CLKOff_BIT;// CDR.3=1--时钟关闭, .7=0---basic CAN, .7=1---Peli CAN
  96   1          SJA_BTR0 = 0x03;
  97   1          SJA_BTR1 = 0x1c;//16M晶振，波特率125Kbps
  98   1          SJA_IER  = RIE_BIT;// .0=1--接收中断使能；  .1=0--关闭发送中断使能
  99   1          SJA_OCR  = NormalMode|Tx0PullDn|OCPOL1_BIT|Tx1PullUp;// 配置输出控制寄存器
 100   1          SJA_CMR  = RRB_BIT;//释放接收缓冲器
 101   1      
 102   1          SJA_ACR0  = 0x11;
 103   1          SJA_ACR1  = 0x22;
 104   1          SJA_ACR2  = 0x33;
 105   1          SJA_ACR3  = 0x44;//初始化标示码
 106   1      
 107   1          SJA_AMR0  = 0xff;
 108   1          SJA_AMR1  = 0xff;
 109   1          SJA_AMR2  = 0xff;
 110   1          SJA_AMR3  = 0xff;//初始化掩码
 111   1      
 112   1          do
 113   1          {   //确保进入自接收模式
 114   2          SJA_MOD   = STM_BIT;
 115   2          Status  = SJA_MOD;
 116   2          }
 117   1          while( !(Status & STM_BIT) );
C51 COMPILER V9.60.0.0   MAIN                                                              04/28/2021 00:02:49 PAGE 3   

 118   1      
 119   1      }  //SJA1000 的初始化
 120          
 121          
 122          void Peli_TXD( void )
 123          {
 124   1          uint8 data Status;
 125   1          //初始化标示码头信息
 126   1          TX_buffer[0] = 0x88;//.7=0扩展帧；.6=0数据帧; .3=1数据长度
 127   1          TX_buffer[1] = 0x01;//本节点地址
 128   1          TX_buffer[2] = 0x02;//
 129   1          TX_buffer[3] = 0x03;//
 130   1          TX_buffer[4] = 0x04;//
 131   1      
 132   1          //初始化发送数据单元
 133   1          TX_buffer[5]  = Txd_data;
 134   1          TX_buffer[6]  = 0x22;
 135   1          TX_buffer[7]  = 0x33;
 136   1          TX_buffer[8]  = 0x44;//
 137   1          TX_buffer[9]  = 0x55;//
 138   1          TX_buffer[10] = 0x66;//
 139   1          TX_buffer[11] = 0x77;//
 140   1          TX_buffer[12] = 0x88;//
 141   1      
 142   1          do
 143   1          {
 144   2              Status = SJA_SR;
 145   2          }
 146   1          while( Status & RS_BIT);  //SR.4=1 正在接收，等待
 147   1          
 148   1          do
 149   1          {
 150   2              Status = SJA_SR;
 151   2          }
 152   1          while(!(Status & TCS_BIT)); //SR.3=0,发送请求未处理完，等待
 153   1      
 154   1          do
 155   1          {
 156   2              Status = SJA_SR;
 157   2          }
 158   1          while(!(Status & TBS_BIT)); //SR.2=0,发送缓冲器被锁。等待
 159   1      
 160   1          SJA_TBSR0  = TX_buffer[0];
 161   1          SJA_TBSR1  = TX_buffer[1];
 162   1          SJA_TBSR2  = TX_buffer[2];
 163   1          SJA_TBSR3  = TX_buffer[3];
 164   1          SJA_TBSR4  = TX_buffer[4];
 165   1          SJA_TBSR5  = TX_buffer[5];
 166   1          SJA_TBSR6  = TX_buffer[6];
 167   1          SJA_TBSR7  = TX_buffer[7];
 168   1          SJA_TBSR8  = TX_buffer[8];
 169   1          SJA_TBSR9  = TX_buffer[9];
 170   1          SJA_TBSR10 = TX_buffer[10];
 171   1          SJA_TBSR11 = TX_buffer[11];
 172   1          SJA_TBSR12  = TX_buffer[12];
 173   1      
 174   1          SJA_CMR = SRR_BIT;//置位自发送接收请求
 175   1      }
 176          
 177          void mDelay(uint16 mtime)
 178          {
 179   1        for(; mtime > 0; mtime--)
C51 COMPILER V9.60.0.0   MAIN                                                              04/28/2021 00:02:49 PAGE 4   

 180   1        {
 181   2          uint8 j = 244;
 182   2          while(--j);
 183   2        }
 184   1      }
 185          
 186          void LED_Disp_Seg7()
 187          {
 188   1      
 189   1         LedCtrl = LedCtrl | 0xf0;
 190   1      
 191   1         DisBuff[0]   = Txd_data%10;//取个位数
 192   1         DisBuff[1]   = Txd_data%100/10; //取十位数
 193   1         DisBuff[2]   = Rxd_data%10;     //百位数
 194   1         DisBuff[3]   = Rxd_data%100/10; //千位数
 195   1        
 196   1         LedPort = LED_Disp[DisBuff[0]];
 197   1         LedCtrl = LedCtrl & 0xbf;
 198   1         mDelay(5);
 199   1         LedCtrl = LedCtrl | 0xf0;
 200   1      
 201   1         LedPort = LED_Disp[DisBuff[1]];
 202   1         LedCtrl = LedCtrl & 0x7f;
 203   1         mDelay(5);
 204   1         LedCtrl = LedCtrl | 0xf0;
 205   1      
 206   1         LedPort = LED_Disp[DisBuff[2]];
 207   1         LedCtrl = LedCtrl & 0xef;
 208   1         mDelay(5);
 209   1         LedCtrl = LedCtrl | 0xf0;
 210   1      
 211   1         LedPort = LED_Disp[DisBuff[3]];
 212   1         LedCtrl = LedCtrl & 0xdf;
 213   1         mDelay(5);
 214   1         LedCtrl = LedCtrl | 0xf0;
 215   1      }
 216          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    559    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     33       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
