C51 COMPILER V9.60.0.0   MAIN                                                              05/01/2021 18:01:45 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*************************************************
   2          *功能描述: CEPARK CAN开发板-CAN两个节点测试
   3          *说明：将两块CAN总线开发板CANH---CANH,CANL---CANL相连
   4          *      连接无误后分别按动中断按键。相应的数码管显示加一。
   5          *      并通过CAN总线发送到另一块数码管上显示。
   6          *版本：v2.00
   7          *声明：程序来自网络，欢迎网友交流改进
   8          *      活跃论坛，共同进步
   9          *作者：协成电子 、hnrain 
  10          *时间：2010/09/14
  11          *邮箱：hnrain1004@gmail.com ，HQL19982003@163.com  ，qq：87675298
  12          *网站：bbs.cepark.com ；写程序如果有问题，可以在这里讨论
  13          *我们的口号：让不懂can的学习者，也能轻松玩转can
  14          
  15          *推荐教材：
  16          饶运涛,邹继军《现场总线 CAN 原理与应用技术》.北京：北京航空航天大学出版社 （这本书，看着不错）
  17          周立功《增强型80c51单片机速成与实战》还有周立功写的一些can通信程序算法很不错，值得学习
  18          本程序，融入了那么一点点点点点，他们的编程思想，哈哈....仅供学习用
  19          ****************************************************/ 
  20          #include <reg52.h>
  21          #include "sjapelican.h"
  22          #include "config.h"
  23          
  24          
  25          
  26            char key = 0,dis_key = 0;
  27            char temputer_H=12,temputer_L =34;
  28            
  29            
  30            
  31          
  32          void INT0_Data(void) interrupt 0
  33          {//INT0按键为计数按键
  34   1          EA = 0;
  35   1        dis_key++;
  36   1        if(dis_key >= 2)dis_key = 0;
  37   1          EA = 1;
  38   1      }
  39          
  40          void Peli_RXD(void) interrupt 2
  41          {//接收数据函数，在中断服务程序中调用
  42   1      
  43   1          uint8 data Status;
  44   1          EA = 0;//关CPU中断
  45   1      
  46   1          Status = SJA_IR;
  47   1          if(Status & RI_BIT)
  48   1          {//IR.0 = 1 接收中断
  49   2              RX_buffer[0] =  SJA_RBSR0;
  50   2              RX_buffer[1] =  SJA_RBSR1;
  51   2              RX_buffer[2] =  SJA_RBSR2;
  52   2              RX_buffer[3] =  SJA_RBSR3;
  53   2              RX_buffer[4] =  SJA_RBSR4;
  54   2              RX_buffer[5] =  SJA_RBSR5;
  55   2              RX_buffer[6] =  SJA_RBSR6;
C51 COMPILER V9.60.0.0   MAIN                                                              05/01/2021 18:01:45 PAGE 2   

  56   2              RX_buffer[7] =  SJA_RBSR7;
  57   2              RX_buffer[8] =  SJA_RBSR8;
  58   2              RX_buffer[9] =  SJA_RBSR9;
  59   2              RX_buffer[10] =  SJA_RBSR10;
  60   2              RX_buffer[11] =  SJA_RBSR11;
  61   2              RX_buffer[12] =  SJA_RBSR12;
  62   2      
  63   2              SJA_CMR = RRB_BIT;
  64   2              Status = SJA_ALC;//释放仲裁随时捕捉寄存器
  65   2              Status = SJA_ECC;//释放错误代码捕捉寄存器
  66   2          }
  67   1          SJA_IER = RIE_BIT;// .0=1--接收中断使能；
  68   1      
  69   1        Rxd_data = RX_buffer[5];
  70   1        Rxd_data1 = RX_buffer[6];
  71   1          
  72   1      
  73   1          EA = 1;//打开CPU中断
  74   1      }
  75          
  76          void MCU_Init(void)
  77          {
  78   1        //CPU初始化
  79   1        SJA_RST = 0;//SJA1000复位有效
  80   1        mDelay(10); //延时
  81   1          SJA_RST = 1;//CAN总线复位管脚,复位无效
  82   1          SJA_CS = 0;//CAN总线片选有效
  83   1          EX1 = 1;//外部中断1使能；CAN总线接收中断
  84   1          IT1 = 0;//CAN总线接收中断，低电平触发
  85   1          IT0 = 1;//外部中断0负边沿触发
  86   1          EX0 = 1;//打开外部中断0
  87   1          EA = 1; //打开总中断
  88   1      }
  89          
  90          
  91          void main(void)
  92          {
  93   1        
  94   1          MCU_Init();
  95   1          Peli_Init();
  96   1      
  97   1      //  mDelay(1);
  98   1          while(1)
  99   1          {  
 100   2            if(Rxd_data1 == 0xFF)
 101   2            {
 102   3              key =Rxd_data;    
 103   3            }else{      
 104   3            temputer_H = Rxd_data ;temputer_L = Rxd_data1  ;    
 105   3              //key=2;
 106   3            }
 107   2            
 108   2            if (dis_key)//dis_key 为显示按键还是温度的标志位
 109   2            {//=0 则是显示温度    
 110   3               DisBuff[2] = 12;    
 111   3               DisBuff[3] = temputer_L/10; 
 112   3               DisBuff[0] =temputer_H%10;    
 113   3               DisBuff[1] = temputer_H/10; 
 114   3            }else
 115   2            {
 116   3               DisBuff[2] = 0;    
 117   3               DisBuff[3] = 0; 
C51 COMPILER V9.60.0.0   MAIN                                                              05/01/2021 18:01:45 PAGE 3   

 118   3               DisBuff[0] =0;    
 119   3               DisBuff[1] =key;   
 120   3            }
 121   2              
 122   2      
 123   2                  
 124   2          LED_Disp_Seg7();
 125   2          }
 126   1      
 127   1      }
 128          //SJA1000 的初始化
 129          void Peli_Init(void)
 130          {
 131   1          uint8 bdata Status;
 132   1          do
 133   1          {//  .0=1---reset MODRe,进入复位模式，以便设置相应的寄存器
 134   2           //防止未进入复位模式，重复写入
 135   2              SJA_MOD = RM_BIT |AFM_BIT;
 136   2        Status = SJA_MOD ;
 137   2          }
 138   1          while(!(Status & RM_BIT));
 139   1      
 140   1          SJA_CDR = CANMode_BIT|CLKOff_BIT;// CDR.3=1--时钟关闭, .7=0---basic CAN, .7=1---Peli CAN
 141   1          SJA_BTR0 = 0x03;
 142   1          SJA_BTR1 = 0x1c;//16M晶振，波特率125Kbps
 143   1          SJA_IER = RIE_BIT;// .0=1--接收中断使能；  .1=0--关闭发送中断使能
 144   1          SJA_OCR = NormalMode|Tx0PullDn|OCPOL1_BIT|Tx1PullUp;// 配置输出控制寄存器
 145   1          SJA_CMR = RRB_BIT;//释放接收缓冲器
 146   1      
 147   1          SJA_ACR0 = 0x11;
 148   1          SJA_ACR1 = 0x22;
 149   1          SJA_ACR2 = 0x33;
 150   1          SJA_ACR3 = 0x44;//初始化标示码
 151   1      
 152   1          SJA_AMR0 = 0xff;
 153   1          SJA_AMR1 = 0xff;
 154   1          SJA_AMR2 = 0xff;
 155   1          SJA_AMR3 = 0xff;//初始化掩码
 156   1      
 157   1          do
 158   1          {
 159   2        SJA_MOD = AFM_BIT;
 160   2        Status  = SJA_MOD;
 161   2           }
 162   1          while( Status & RM_BIT );
 163   1      
 164   1      }//SJA1000 的初始化
 165          
 166          
 167          void Peli_TXD( void )
 168          {
 169   1          uint8 data Status;
 170   1      //初始化标示码头信息
 171   1          TX_buffer[0] = 0x88;//.7=0扩展帧；.6=0数据帧; .3=1数据长度
 172   1          TX_buffer[1] = 0x01;//本节点地址
 173   1          TX_buffer[2] = 0x02;
 174   1          TX_buffer[3] = 0x03;
 175   1          TX_buffer[4] = 0x04;
 176   1      
 177   1      //初始化发送数据单元
 178   1          TX_buffer[5]  = Txd_data;
 179   1          TX_buffer[6]  = 0x22;
C51 COMPILER V9.60.0.0   MAIN                                                              05/01/2021 18:01:45 PAGE 4   

 180   1          TX_buffer[7]  = 0x33;
 181   1          TX_buffer[8]  = 0x44;
 182   1          TX_buffer[9]  = 0x55;
 183   1          TX_buffer[10] = 0x66;
 184   1          TX_buffer[11] = 0x77;
 185   1          TX_buffer[12] = 0x88;
 186   1      
 187   1          do
 188   1          {
 189   2              Status = SJA_SR;
 190   2          }
 191   1          while( Status & RS_BIT);  //SR.4=1 正在接收，等待
 192   1          
 193   1          do
 194   1          {
 195   2              Status = SJA_SR;
 196   2          }
 197   1          while(!(Status & TCS_BIT)); //SR.3=0,发送请求未处理完，等待
 198   1      
 199   1          do
 200   1          {
 201   2              Status = SJA_SR;
 202   2          }
 203   1          while(!(Status & TBS_BIT)); //SR.2=0,发送缓冲器被锁。等待
 204   1      
 205   1          SJA_TBSR0  = TX_buffer[0];
 206   1          SJA_TBSR1  = TX_buffer[1];
 207   1          SJA_TBSR2  = TX_buffer[2];
 208   1          SJA_TBSR3  = TX_buffer[3];
 209   1          SJA_TBSR4  = TX_buffer[4];
 210   1          SJA_TBSR5  = TX_buffer[5];
 211   1          SJA_TBSR6  = TX_buffer[6];
 212   1          SJA_TBSR7  = TX_buffer[7];
 213   1          SJA_TBSR8  = TX_buffer[8];
 214   1          SJA_TBSR9  = TX_buffer[9];
 215   1          SJA_TBSR10 = TX_buffer[10];
 216   1          SJA_TBSR11 = TX_buffer[11];
 217   1          SJA_TBSR12 = TX_buffer[12];
 218   1      
 219   1          SJA_CMR = TR_BIT;//置位发送接收请求
 220   1      }
 221          
 222          void mDelay(uint16 mtime)
 223          {
 224   1        for(; mtime > 0; mtime--)
 225   1        {
 226   2          uint8 j = 244;
 227   2          while(--j);
 228   2        }
 229   1      }
 230          
 231          void LED_Disp_Seg7()
 232          {
 233   1        
 234   1        uint8 number;
 235   1         LedCtrl = LedCtrl | 0xf0;
 236   1      
 237   1      if (dis_key) number = (0x7F)&LED_Disp[DisBuff[0]] ;
 238   1        else number = LED_Disp[DisBuff[0]];
 239   1        
 240   1         LedPort = number;
 241   1         LedCtrl = LedCtrl & 0xbf;
C51 COMPILER V9.60.0.0   MAIN                                                              05/01/2021 18:01:45 PAGE 5   

 242   1         mDelay(3);
 243   1         LedCtrl = LedCtrl | 0xf0;
 244   1        
 245   1        
 246   1      
 247   1         LedPort = LED_Disp[DisBuff[1]];
 248   1         LedCtrl = LedCtrl & 0x7f;
 249   1         mDelay(3);
 250   1         LedCtrl = LedCtrl | 0xf0;
 251   1      
 252   1        
 253   1      
 254   1          
 255   1          
 256   1         LedPort =LED_Disp[DisBuff[2]] ;
 257   1         LedCtrl = LedCtrl & 0xef;
 258   1         mDelay(3);
 259   1         LedCtrl = LedCtrl | 0xf0;
 260   1         
 261   1         
 262   1        
 263   1         LedPort = LED_Disp[DisBuff[3]];
 264   1         LedCtrl = LedCtrl & 0xdf;
 265   1         mDelay(3);
 266   1         LedCtrl = LedCtrl | 0xf0;
 267   1      }
 268          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    581    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     38       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
